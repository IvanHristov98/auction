// This file was generated by counterfeiter
package fake_auctionrunner

import (
	"sync"

	"github.com/cloudfoundry-incubator/auction/auctiontypes"
)

type FakeAuctionRunner struct {
	RunLRPStartAuctionStub        func(auctionRequest auctiontypes.StartAuctionRequest) (auctiontypes.StartAuctionResult, error)
	runLRPStartAuctionMutex       sync.RWMutex
	runLRPStartAuctionArgsForCall []struct {
		auctionRequest auctiontypes.StartAuctionRequest
	}
	runLRPStartAuctionReturns struct {
		result1 auctiontypes.StartAuctionResult
		result2 error
	}
	RunLRPStopAuctionStub        func(auctionRequest auctiontypes.StopAuctionRequest) (auctiontypes.StopAuctionResult, error)
	runLRPStopAuctionMutex       sync.RWMutex
	runLRPStopAuctionArgsForCall []struct {
		auctionRequest auctiontypes.StopAuctionRequest
	}
	runLRPStopAuctionReturns struct {
		result1 auctiontypes.StopAuctionResult
		result2 error
	}
}

func (fake *FakeAuctionRunner) RunLRPStartAuction(auctionRequest auctiontypes.StartAuctionRequest) (auctiontypes.StartAuctionResult, error) {
	fake.runLRPStartAuctionMutex.Lock()
	fake.runLRPStartAuctionArgsForCall = append(fake.runLRPStartAuctionArgsForCall, struct {
		auctionRequest auctiontypes.StartAuctionRequest
	}{auctionRequest})
	fake.runLRPStartAuctionMutex.Unlock()
	if fake.RunLRPStartAuctionStub != nil {
		return fake.RunLRPStartAuctionStub(auctionRequest)
	} else {
		return fake.runLRPStartAuctionReturns.result1, fake.runLRPStartAuctionReturns.result2
	}
}

func (fake *FakeAuctionRunner) RunLRPStartAuctionCallCount() int {
	fake.runLRPStartAuctionMutex.RLock()
	defer fake.runLRPStartAuctionMutex.RUnlock()
	return len(fake.runLRPStartAuctionArgsForCall)
}

func (fake *FakeAuctionRunner) RunLRPStartAuctionArgsForCall(i int) auctiontypes.StartAuctionRequest {
	fake.runLRPStartAuctionMutex.RLock()
	defer fake.runLRPStartAuctionMutex.RUnlock()
	return fake.runLRPStartAuctionArgsForCall[i].auctionRequest
}

func (fake *FakeAuctionRunner) RunLRPStartAuctionReturns(result1 auctiontypes.StartAuctionResult, result2 error) {
	fake.RunLRPStartAuctionStub = nil
	fake.runLRPStartAuctionReturns = struct {
		result1 auctiontypes.StartAuctionResult
		result2 error
	}{result1, result2}
}

func (fake *FakeAuctionRunner) RunLRPStopAuction(auctionRequest auctiontypes.StopAuctionRequest) (auctiontypes.StopAuctionResult, error) {
	fake.runLRPStopAuctionMutex.Lock()
	fake.runLRPStopAuctionArgsForCall = append(fake.runLRPStopAuctionArgsForCall, struct {
		auctionRequest auctiontypes.StopAuctionRequest
	}{auctionRequest})
	fake.runLRPStopAuctionMutex.Unlock()
	if fake.RunLRPStopAuctionStub != nil {
		return fake.RunLRPStopAuctionStub(auctionRequest)
	} else {
		return fake.runLRPStopAuctionReturns.result1, fake.runLRPStopAuctionReturns.result2
	}
}

func (fake *FakeAuctionRunner) RunLRPStopAuctionCallCount() int {
	fake.runLRPStopAuctionMutex.RLock()
	defer fake.runLRPStopAuctionMutex.RUnlock()
	return len(fake.runLRPStopAuctionArgsForCall)
}

func (fake *FakeAuctionRunner) RunLRPStopAuctionArgsForCall(i int) auctiontypes.StopAuctionRequest {
	fake.runLRPStopAuctionMutex.RLock()
	defer fake.runLRPStopAuctionMutex.RUnlock()
	return fake.runLRPStopAuctionArgsForCall[i].auctionRequest
}

func (fake *FakeAuctionRunner) RunLRPStopAuctionReturns(result1 auctiontypes.StopAuctionResult, result2 error) {
	fake.RunLRPStopAuctionStub = nil
	fake.runLRPStopAuctionReturns = struct {
		result1 auctiontypes.StopAuctionResult
		result2 error
	}{result1, result2}
}

var _ auctiontypes.AuctionRunner = new(FakeAuctionRunner)
